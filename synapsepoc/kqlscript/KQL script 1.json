{
	"name": "KQL script 1",
	"properties": {
		"content": {
			"query": "\n\n//                    [\\\n//               .----' `-----.\n//              //^^^^;;^^^^^^`\\\n//      _______//_____||_____()_\\________\n//     /212    :      : ___              `\\\n//    |>   ____;      ;  |/\\><|   ____   _<)\n//   {____/    \\_________________/    \\____}\n//        \\ '' /                 \\ '' /\n//         '--'                   '--'\n\n// Microsoft Developer - IoT Show: https://youtu.be/2aOa_S3Up0A\n// Azure Hour: https://youtu.be/D_AJk2lAepw\ntaxitriptable\n| count\n\n//time series chart\n//number of rides every 15 minutes in a 1 day period\n//query is running on 50K rows\n\ntaxitriptable\n| where pickup_datetime between (datetime(2013-01-13 00:00:00.0) .. datetime(2013-01-13 23:59:59.9))\n| make-series ridecount=count() on pickup_datetime from datetime(2013-01-13 00:00:00.0) to datetime(2013-01-13 23:59:59.9) step 15min\n| render timechart \n\n\n//Anomaly detection\n\ntaxitriptable\n| where pickup_datetime between (datetime(2013-01-12 00:00:00.0) .. datetime(2013-01-14 23:59:59.9))\n| make-series ridecount=count() on pickup_datetime from datetime(2013-01-13 00:00:00.0) to datetime(2013-01-13 23:59:59.9) step 15min\n| extend anomalies = series_decompose_anomalies(ridecount,1)\n| render anomalychart with(anomalycolumns=anomalies, title='anomalies on nyc taxi rides')\n\n// List of anomalies\n\ntaxitriptable\n| where pickup_datetime between (datetime(2013-01-12 00:00:00.0) .. datetime(2013-01-14 23:59:59.9))\n| make-series ridecount=count() on pickup_datetime from datetime(2013-01-13 00:00:00.0) to datetime(2013-01-13 23:59:59.9) step 15min\n| extend anomalies = series_decompose_anomalies(ridecount,1)\n| mv-expand ridecount, anomalies, pickup_datetime\n| where anomalies <> 0\n| sort by todatetime(pickup_datetime)\n| take 10 \n\n\n//regression analysis\n\ntaxitriptable\n| where pickup_datetime between (datetime(2013-01-12 00:00:00.0) .. datetime(2013-01-14 23:59:59.9))\n| make-series ridecount=count() on pickup_datetime from datetime(2013-01-13 00:00:00.0) to datetime(2013-01-13 23:59:59.9) step 15min\n| extend series_fit_2lines(ridecount)\n| render timechart \n\n//forecasting\n\ntaxitriptable\n| where pickup_datetime between (datetime(2013-01-12 00:00:00.0) .. datetime(2013-01-14 23:59:59.9))\n| make-series ridecount=count() on pickup_datetime from datetime(2013-01-13 00:00:00.0) to datetime(2013-01-13 23:59:59.9) step 15min\n| extend forecast = series_decompose_forecast(ridecount, 28)\n| render timechart with(title='Forecasting the next day by Time Series Decomposition')",
			"metadata": {
				"language": "kql"
			},
			"currentConnection": {
				"poolName": "adxpooltaxitrip",
				"databaseName": "taxitripdatabase"
			}
		},
		"type": "KqlQuery"
	}
}