{
	"name": "KQL script 1",
	"properties": {
		"content": {
			"query": "-- connect cluster(\"demo12.westus\").database(\"Datasets\")\n\n\n//                    [\\\n//               .----' `-----.\n//              //^^^^;;^^^^^^`\\\n//      _______//_____||_____()_\\________\n//     /212    :      : ___              `\\\n//    |>   ____;      ;  |/\\><|   ____   _<)\n//   {____/    \\_________________/    \\____}\n//        \\ '' /                 \\ '' /\n//         '--'                   '--'\n\n// Microsoft Developer - IoT Show: https://youtu.be/2aOa_S3Up0A\n// Azure Hour: https://youtu.be/D_AJk2lAepw\n\n// nyc taxi dataset\n// ~1.5B rows\ntaxitriptable\n| count\n\n\n// time series chart\n// number of rides by week\n// query is running on 1.5 B rows\ntaxitriptable\n| where pickup_datetime between(datetime(2009-01-01) .. datetime(2018-07-01))\n| make-series ridecount=count() on pickup_datetime from datetime(2009-01-01) to datetime(2018-07-01) step 7d\n| render timechart \n\n\n// anomaly detection\ntaxitriptable\n| where pickup_datetime between (datetime(2009-01-01) .. datetime(2018-07-01))\n| make-series ridecount=count() on pickup_datetime from datetime(2009-01-01) to datetime(2018-07-01) step 7d\n| extend anomalies = series_decompose_anomalies(ridecount,1)\n| render anomalychart with(anomalycolumns=anomalies, title='anomalies on nyc taxi rides')\n\n// List of anomalies\n\ntaxitriptable\n| where pickup_datetime between (datetime(2009-01-01) .. datetime(2018-07-01))\n| make-series ridecount=count() on pickup_datetime from datetime(2009-01-01) to datetime(2018-07-01) step 7d\n| extend anomalies = series_decompose_anomalies(ridecount,1)\n| mv-expand ridecount, anomalies, pickup_datetime\n| where anomalies <> 0\n| sort by todatetime(pickup_datetime)\n| take 10 \n\n\n\n\n//forecasting\n\nFHV_Trips\n| count\n\n\n\ntaxitriptable\n| where pickup_datetime between(datetime(2009-01-01) .. datetime(2018-07-01))\n| make-series ridecount=count() on pickup_datetime from datetime(2009-01-01) to datetime(2018-07-01) step 1d\n| extend forecast = series_decompose_forecast(ridecount, 28)\n| render timechart with(title='Forecasting the next week by Time Series Decomposition')\n\n\n\n\n\n// regression analysis\nTrips\n| where pickup_datetime between(datetime(2009-01-01) .. datetime(2018-07-01))\n| make-series ridecount=count() on pickup_datetime from datetime(2009-01-01) to datetime(2018-07-01) step 7d\n| extend series_fit_2lines(ridecount)\n| render timechart \n\n\n\n// private ride apps\nFHV_Trips\n| count \n\n\n// compare nyc taxi trend with app based rides (uber, lyft, etc)\n// union of two large tables; 1.5B rows and 500M rows\nunion withsource=T Trips, FHV_Trips\n| where pickup_datetime between (datetime(2009-01-01) .. datetime(2018-07-01))\n| summarize count() by T, bin(pickup_datetime, 7d)\n| render timechart\n\n\n// forecasting\nFHV_Trips\n| where pickup_datetime between(datetime(2017-01-01) .. datetime(2018-07-01))\n| make-series ridecount=count() on pickup_datetime from datetime(2017-01-01) to datetime(2018-07-01) step 1d\n| extend forecast = series_decompose_forecast(ridecount, 28)\n| render timechart with(title='Forecasting the next week by Time Series Decomposition')\n\n\n////////////////\n////////////////\n////////////////\n\n\n// python plugin\n// invoke custom udf\nOccupancyDetection\n| extend cluster_id=double(null)\n| invoke kmeans_sf_OccupDetc(5, pack_array(\"Temperature\", \"Humidity\", \"Light\", \"CO2\", \"HumidityRatio\"), \"cluster_id\")\n| sample 10\n\n\nML_Models\n\n\n// historical scenerio\n// query adls gen 2\nexternal_table('TaxiRides')\n| where pickup_datetime between(datetime(2017-01-01) .. datetime(2017-02-01))\n| summarize count() by cab_type\n| render piechart \n\n\n#connect cluster('help').database('samples')\n\n//cab type over a month\nexternal_table(\"TaxiRides\")\n| where pickup_datetime between (datetime(2017-01-01) .. datetime(2017-02-01))\n| summarize  count() by cab_type, bin(pickup_datetime, 1d)\n| render timechart\n\n\n//comparing two weeks YoY\nlet Rides = (start:datetime, end:datetime)\n{\n    external_table(\"TaxiRides\")\n    | where pickup_datetime > start and pickup_datetime < end\n    | extend Day=dayofmonth(pickup_datetime)\n};\nRides(datetime(2017-12-23), datetime(2018-01-01)) \n| summarize Count_2017=count() by Day\n| join (Rides(datetime(2016-12-23),datetime(2017-01-01))\n| summarize  Count_2016=count() by Day) on Day\n| project-away Day1 \n| render columnchart\n",
			"metadata": {
				"language": "kql"
			},
			"currentConnection": {
				"poolName": "adxpooltaxitrip",
				"databaseName": "taxitripdatabase"
			}
		},
		"type": "KqlQuery"
	}
}