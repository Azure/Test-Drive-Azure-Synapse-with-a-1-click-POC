{
	"name": "Analyze Taxi Trip Data using KQL",
	"properties": {
		"content": {
			"query": "\n\n//                    [\\\n//               .----' `-----.\n//              //^^^^;;^^^^^^`\\\n//      _______//_____||_____()_\\________\n//     /212    :      : ___              `\\\n//    |>   ____;      ;  |/\\><|   ____   _<)\n//   {____/    \\_________________/    \\____}\n//        \\ '' /                 \\ '' /\n//         '--'                   '--'\n\n// Microsoft Developer - IoT Show: https://youtu.be/2aOa_S3Up0A\n// Azure Hour: https://youtu.be/D_AJk2lAepw\n\n// a. Counts the number of records in the 'taxitriptable' table\ntaxitriptable\n| count\n\n//b. Summarizes the minimum and maximum values of the 'pickup_datetime' columns in the'taxitriptable' table. \ntaxitriptable\n| summarize min(pickup_datetime), max(pickup_datetime)\n\n//c. Summarizes the count of records in the 'taxitriptable' table by grouping them into daily intervals\n//   based on the 'pickup_datetime' column. \ntaxitriptable\n| summarize count() by bin( pickup_datetime , 1d)\n\n//d. Filters the 'taxitriptable' table to select records with pickup datetime between January 1, 2013, 01:04:00 (UTC)\n//   and January 19th, 2013, 19:49:49 (UTC) (which are the min and max found in step b),\n//   then counts the number of rides in 15 minute intervals within that time range, \n//   and finally visualizes the results as a time chart. \ntaxitriptable\n| where pickup_datetime between (datetime(2013-01-01T01:04:00Z) .. datetime(2013-01-19T19:49:49Z))\n| make-series ridecount=count() on pickup_datetime from datetime(2013-01-01T01:04:00Z) to datetime(2013-01-19T19:49:49Z) step 15min\n| render timechart \n\n\n// e. Now we are trimming the tails of the dataset by filtering the 'taxitriptable' table \n//    to select records with a pickup datetime between January 13, 2013, 00:00:00 and January 13, 2013, 16:15:00.\n//    Similarly it then counts the number of rides in 15 minute intervals within that time range, \n//    and finally visualizes the results as a time chart. \ntaxitriptable\n| where pickup_datetime between (datetime(2013-01-13 00:00:00.0) .. datetime(2013-01-13 16:15))\n| make-series ridecount=count() on pickup_datetime from datetime(2013-01-13 00:00:00.0) to datetime(2013-01-13 16:15) step 15min\n| render timechart \n\n\n// f. Again, it filters the 'taxitriptable' table to select records with a pickup datetime between January 13, 2013, 00:00:00 \n//    and January 13, 2013, 16:15:00. It then counts the number of rides in 15 min intervals within that time range. \n//    After that, it uses the \"series_decompose_anomalies\" function to identify anomalies in the ride count data.\n//    Finally, it visualizes the anomalies as an anomaly chart titled \"Anomalies on NYC taxi rides\". \n//    Anomalies can be seen as red dots on the chart. \ntaxitriptable\n| where pickup_datetime between (datetime(2013-01-13 00:00:00.0) .. datetime(2013-01-13 16:15))\n| make-series ridecount=count() on pickup_datetime from datetime(2013-01-13 00:00:00.0) to datetime(2013-01-13 16:15) step 15min\n| extend anomalies = series_decompose_anomalies(ridecount,0.5)\n| render anomalychart with(anomalycolumns=anomalies, title='anomalies on nyc taxi rides')\n\n\n// g.  Lists Anomalies: Creates a series of ride counts in 15-minute intervals from the \"taxitriptable\" table\n//     for the time range between January 13, 2013, 00:00:00 and January 13, 2013, 16:15:00.\n//     It then uses the \"series_decompose_anomalies\" function to identify anomalies in the ride count data \n//     and extends the table with an \"anomalies\" column. The \"mv-expand\" function is used to expand the table to separate rows\n//     for each ride count and its corresponding anomaly value and pickup datetime. \n//     The code then filters the table to only include rows where the anomaly value is not equal to zero. \n//     The table is sorted by pickup datetime and the first 10 rows are selected for further analysis. \n//     Ultimately,  listing the anomalies found. \ntaxitriptable\n| make-series ridecount=count() on pickup_datetime from datetime(2013-01-13 00:00:00.0) to datetime(2013-01-13 16:15) step 15min\n| extend anomalies = series_decompose_anomalies(ridecount,0.5)\n| mv-expand ridecount, anomalies, pickup_datetime\n| where toint(anomalies)  <> 0\n| sort by todatetime(pickup_datetime)\n| take 10 \n\n// h. Similarly, it creates a series of ride counts in 15-minute intervals from the \"taxitriptable\" table \n//    for the time range between January 13, 2013, 00:00:00 and January 13, 2013, 16:15:00. \n//    It then uses the \"series_decompose_anomalies\" function to decompose the ride count data into anomalies, score, and baseline values. \n//    The table is expanded to separate rows for each anomaly, pickup datetime, ride count, score, and baseline. \n//    Finally, the table is projected to include the anomalies, pickup datetime, ride count, score, and baseline columns,\n//    where the anomalies column is set to null if the anomaly value is 0.\n//    Overall, the anomaly is based on the deviation from the baseline compared to the actual (ridecount)\ntaxitriptable\n| make-series ridecount=count() on pickup_datetime from datetime(2013-01-13 00:00:00.0) to datetime(2013-01-13 16:15) step 15min\n| extend (anomalies, score, baseline) = series_decompose_anomalies(ridecount, 0.5)\n| mv-expand anomalies, pickup_datetime, ridecount, score, baseline\n| project anomalies = iff(toint(anomalies) == 0,int(null),toint(anomalies)), pickup_datetime, ridecount, score, baseline\n\n// i. This code retrieves data from the \"FaresData\" table using a SQL request in Azure Synapse Data Explorer. \n//    It then projects specific columns from the retrieved data, including converting some columns to specific data types. \n//    Finally, it performs a left outer join with the \"taxitriptable\" table based on matching values \n//    in the \"medallion\", \"hack_license\", \"vendor_id\", and \"pickup_datetime\" columns.  \n//    Overall, it joined the synapse SQL pool and data explorer pool to visualize in powerBI\nlet FaresData= evaluate sql_request(\n  'Server=tcp:micbxthup2nqlpf2pocws1.sql.azuresynapse.net,1433;' // my synapse data explorer pool\n    'Authentication=\"Active Directory Integrated\";'\n    'Initial Catalog=micbxthup2nqlpf2pocws1p1;', // my dw name\n  'select * from dbo.FaresData ');\nFaresData\n| project toguid(medallion), toguid(hack_license), tostring(vendor_id), todatetime(pickup_datetime), payment_type, todecimal(fare_amount)\n, todecimal(surcharge), todecimal(mta_tax), todecimal(tip_amount), todecimal(tolls_amount), todecimal(total_amount)\n| join kind=leftouter taxitriptable on $left.medallion == $right.medallion,  $left.hack_license == $right.hack_license,\n $left.vendor_id == $right.vendor_id, $left.pickup_datetime == $right.pickup_datetime \n \n",
			"metadata": {
				"language": "kql"
			},
			"currentConnection": {
				"poolName": "adxpooltaxitrip",
				"databaseName": "taxitripdatabase"
			}
		},
		"type": "KqlQuery"
	}
}